{"version":3,"sources":["webpack:///./src/state/helpers.js","webpack:///./src/views/account/forgot-password.vue","webpack:///./src/views/account/forgot-password.vue?d50e","webpack:///./node_modules/@vuelidate/validators/dist/index.esm.js"],"names":["mapState","currentUser","state","mapGetters","layoutComputed","layoutType","sidebarSize","layoutWidth","topbar","mode","position","sidebarView","sidebarColor","sidebarImage","authMethods","mapActions","layoutMethods","todos","class","_createElementVNode","id","xmlns","version","xmlns:xlink","viewBox","d","src","_imports_0","alt","height","type","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_createVNode","_component_router_link","to","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_component_lottie","colors","options","$data","width","_hoisted_17","_component_b_alert","variant","dismissible","onSubmit","$options","_hoisted_18","_hoisted_19","$setup","email","$errors","placeholder","_Fragment","item","index","key","$message","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","Date","getFullYear","components","lottie","Lottie","setup","v$","useVuelidate","validations","required","helpers","withMessage","page","title","meta","name","content","appConfig","description","data","submitted","error","tryingToReset","isResetError","defaultOptions","animationData","methods","tryToReset","this","$touch","$invalid","__exports__","render","isFunction","val","isObject","o","Array","isArray","normalizeValidatorObject","validator","$validator","Object","assign","unwrapValidatorResponse","result","$valid","unwrapNormalizedValidator","withParams","$params","Error","validatorObj","withAsync","$watchTargets","arguments","length","undefined","$async","forEach","validators","collection","_len","others","_key","reduce","previous","collectionItem","collectionEntryResult","entries","all","_ref","property","$model","innerValidators","propertyResult","_ref2","validatorName","currentValidator","validatorFunction","$response","call","$error","$pending","push","$property","concat","_ref3","map","context","values","errors","a","b","req","value","isNaN","getTime","_","String","len","keys","regex","expr","every","reg","test","common","freeze","__proto__","unwrap","emailRegex","email$1","required$1","trim","urlRegex"],"mappings":"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","file":"js/chunk-37741cb8.76f910a0.js","sourcesContent":["import { mapState, mapGetters, mapActions } from 'vuex'\r\n\r\nexport const authComputed = {\r\n  ...mapState('auth', {\r\n    currentUser: (state) => state.currentUser,\r\n  }),\r\n  ...mapGetters('auth', ['loggedIn']),\r\n}\r\n\r\nexport const layoutComputed = {\r\n  ...mapState('layout', {\r\n    layoutType: (state) => state.layoutType,\r\n    sidebarSize: (state) => state.sidebarSize,\r\n    layoutWidth: (state) => state.layoutWidth,\r\n    topbar: (state) => state.topbar,\r\n    mode: (state) => state.mode,\r\n    position: (state) => state.position,\r\n    sidebarView: (state) => state.sidebarView,\r\n    sidebarColor: (state) => state.sidebarColor,\r\n    sidebarImage: (state) => state.sidebarImage\r\n  })\r\n}\r\n\r\nexport const authMethods = mapActions('auth', ['logIn', 'logOut', 'register', 'resetPassword'])\r\n\r\nexport const layoutMethods = mapActions('layout', \r\n['changeLayoutType', 'changeLayoutWidth', 'changeSidebarSize', 'changeTopbar', 'changeMode', 'changePosition', 'changeSidebarView',\r\n 'changeSidebarColor','changeSidebarImage','changePreloader'])\r\n\r\nexport const authFackMethods = mapActions('authfack', ['login', 'registeruser', 'logout'])\r\n\r\nexport const notificationMethods = mapActions('notification', ['success', 'error', 'clear'])\r\n\r\nexport const todoComputed = {\r\n  ...mapState('todo', {\r\n    todos: (state) => state.todos\r\n  })\r\n}\r\nexport const todoMethods = mapActions('todo', ['fetchTodos'])","<script>\nimport { authMethods } from \"@/state/helpers\";\nimport appConfig from \"../../../app.config\";\n\nimport { required, email, helpers } from \"@vuelidate/validators\";\nimport useVuelidate from \"@vuelidate/core\";\nimport Lottie from \"@/components/widgets/lottie.vue\";\n\nimport animationData from \"@/components/widgets/rhvddzym.json\";\nexport default {\n  components: { lottie: Lottie },\n  setup() {\n    return { v$: useVuelidate() };\n  },\n  validations: {\n    email: {\n      required: helpers.withMessage(\"Email is required\", required),\n      email: helpers.withMessage(\"Please enter valid email\", email),\n    },\n  },\n  page: {\n    title: \"Forgot Password\",\n    meta: [\n      {\n        name: \"description\",\n        content: appConfig.description,\n      },\n    ],\n  },\n  data() {\n    return {\n      email: \"\",\n      submitted: false,\n      error: null,\n      tryingToReset: false,\n      isResetError: false,\n      defaultOptions: { animationData: animationData },\n    };\n  },\n  methods: {\n    ...authMethods,\n    // Try to register the user in with the email, fullname\n    // and password they provided.\n    tryToReset() {\n      this.submitted = true;\n      // stop here if form is invalid\n      this.v$.$touch();\n\n      if (this.v$.$invalid) {\n        return;\n      } else {\n        if (process.env.VUE_APP_DEFAULT_AUTH === \"firebase\") {\n          this.tryingToReset = true;\n          // Reset the authError if it existed.\n          this.error = null;\n          return (\n            this.resetPassword({\n              email: this.email,\n            })\n              // eslint-disable-next-line no-unused-vars\n              .then((token) => {\n                this.tryingToReset = false;\n                this.isResetError = false;\n              })\n              .catch((error) => {\n                this.tryingToReset = false;\n                this.error = error ? error : \"\";\n                this.isResetError = true;\n              })\n          );\n        }\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <div class=\"auth-page-wrapper pt-5\">\n    <!-- auth page bg -->\n    <div class=\"auth-one-bg-position auth-one-bg\" id=\"auth-particles\">\n      <div class=\"bg-overlay\"></div>\n\n      <div class=\"shape\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          version=\"1.1\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          viewBox=\"0 0 1440 120\"\n        >\n          <path\n            d=\"M 0,36 C 144,53.6 432,123.2 720,124 C 1008,124.8 1296,56.8 1440,40L1440 140L0 140z\"\n          ></path>\n        </svg>\n      </div>\n    </div>\n\n    <!-- auth page content -->\n    <div class=\"auth-page-content\">\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col-lg-12\">\n            <div class=\"text-center mt-sm-5 mb-4 text-white-50\">\n              <div>\n                <router-link to=\"/\" class=\"d-inline-block auth-logo\">\n                  <img\n                    src=\"@/assets/images/logo-light.png\"\n                    alt=\"\"\n                    height=\"20\"\n                  />\n                </router-link>\n              </div>\n              <p class=\"mt-3 fs-15 fw-medium\">\n                Premium Admin & Dashboard Template\n              </p>\n            </div>\n          </div>\n        </div>\n        <!-- end row -->\n\n        <div class=\"row justify-content-center\">\n          <div class=\"col-md-8 col-lg-6 col-xl-5\">\n            <div class=\"card mt-4\">\n              <div class=\"card-body p-4\">\n                <div class=\"text-center mt-2\">\n                  <h5 class=\"text-primary\">Forgot Password?</h5>\n                  <p class=\"text-muted\">Reset password with velzon</p>\n\n                   <lottie\n                    class=\"avatar-xl\"\n                      colors=\"primary:#0ab39c,secondary:#405189\"\n                      :options=\"defaultOptions\"\n                      :height=\"120\"\n                      :width=\"120\"\n                    />\n                  \n                </div>\n\n                <div class=\"p-2\">\n                  <b-alert\n                    v-model=\"isResetError\"\n                    class=\"mb-4\"\n                    variant=\"danger\"\n                    dismissible\n                    >{{ error }}</b-alert\n                  >\n                  <form @submit.prevent=\"tryToReset\">\n                    <div class=\"mb-4\">\n                      <label class=\"form-label\">Email</label>\n                      <input\n                        type=\"email\"\n                        v-model=\"email\"\n                        class=\"form-control\"\n                        id=\"email\"\n                        :class=\"{ 'is-invalid': submitted && v$.email.$errors }\"\n                        placeholder=\"Enter Email\"\n                      />\n                      <div\n                        v-for=\"(item, index) in v$.email.$errors\"\n                        :key=\"index\"\n                        class=\"invalid-feedback\"\n                      >\n                        <span v-if=\"item.$message\">{{ item.$message }}</span>\n                      </div>\n                    </div>\n\n                    <div class=\"text-center mt-4\">\n                      <button class=\"btn btn-success w-100\" type=\"submit\">\n                        Send Reset Link\n                      </button>\n                    </div>\n                  </form>\n                  <!-- end form -->\n                </div>\n              </div>\n              <!-- end card body -->\n            </div>\n            <!-- end card -->\n\n            <div class=\"mt-4 text-center\">\n              <p class=\"mb-0\">\n                Wait, I remember my password...\n                <router-link\n                  to=\"/login\"\n                  class=\"fw-semibold text-primary text-decoration-underline\"\n                >\n                  Click here\n                </router-link>\n              </p>\n            </div>\n          </div>\n        </div>\n        <!-- end row -->\n      </div>\n      <!-- end container -->\n    </div>\n    <!-- end auth page content -->\n\n    <!-- footer -->\n    <footer class=\"footer\">\n      <div class=\"container\">\n        <div class=\"row\">\n          <div class=\"col-lg-12\">\n            <div class=\"text-center\">\n              <p class=\"mb-0 text-muted\">\n                &copy; {{ new Date().getFullYear() }} Velzon. Crafted with\n                <i class=\"mdi mdi-heart text-danger\"></i> by Themesbrand\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n    <!-- end Footer -->\n  </div>\n  <!-- end auth-page-wrapper -->\n</template>\n","import { render } from \"./forgot-password.vue?vue&type=template&id=75cca433\"\nimport script from \"./forgot-password.vue?vue&type=script&lang=js\"\nexport * from \"./forgot-password.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"C:\\\\Users\\\\USER\\\\Downloads\\\\velzon\\\\Velzon_v2.0.0\\\\Vue\\\\Vue\\\\minimal\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { unref } from 'vue-demi';\n\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\nfunction isObject(o) {\n  return o !== null && typeof o === 'object' && !Array.isArray(o);\n}\n/**\n * Returns a standard ValidatorObject\n * Wraps a plain function into a ValidatorObject\n * @param {NormalizedValidator|Function} validator\n * @return {NormalizedValidator}\n */\n\nfunction normalizeValidatorObject(validator) {\n  return isFunction(validator.$validator) ? Object.assign({}, validator) : {\n    $validator: validator\n  };\n}\nfunction isPromise(object) {\n  return isObject(object) && isFunction(object.then);\n}\n/**\n * Unwraps a ValidatorResponse object, into a boolean.\n * @param {ValidatorResponse} result\n * @return {boolean}\n */\n\nfunction unwrapValidatorResponse(result) {\n  if (typeof result === 'object') return result.$valid;\n  return result;\n}\n/**\n * Unwraps a `NormalizedValidator` object, returning its validator function.\n * @param {NormalizedValidator | Function} validator\n * @return {function}\n */\n\nfunction unwrapNormalizedValidator(validator) {\n  return validator.$validator || validator;\n}\n\n/**\n * Allows attaching parameters to a validator\n * @param {Object} $params\n * @param {NormalizedValidator|Function} $validator\n * @return {NormalizedValidator}\n */\n\nfunction withParams($params, $validator) {\n  if (!isObject($params)) throw new Error(`[@vuelidate/validators]: First parameter to \"withParams\" should be an object, provided ${typeof $params}`);\n  if (!isObject($validator) && !isFunction($validator)) throw new Error(`[@vuelidate/validators]: Validator must be a function or object with $validator parameter`);\n  const validatorObj = normalizeValidatorObject($validator);\n  validatorObj.$params = Object.assign({}, validatorObj.$params || {}, $params);\n  return validatorObj;\n}\n\n/**\n * @callback MessageCallback\n * @param {Object} params\n * @return String\n */\n\n/**\n * Attaches a message to a validator\n * @param {MessageCallback | String} $message\n * @param {NormalizedValidator|Function} $validator\n * @return {NormalizedValidator}\n */\n\nfunction withMessage($message, $validator) {\n  if (!isFunction($message) && typeof unref($message) !== 'string') throw new Error(`[@vuelidate/validators]: First parameter to \"withMessage\" should be string or a function returning a string, provided ${typeof $message}`);\n  if (!isObject($validator) && !isFunction($validator)) throw new Error(`[@vuelidate/validators]: Validator must be a function or object with $validator parameter`);\n  const validatorObj = normalizeValidatorObject($validator);\n  validatorObj.$message = $message;\n  return validatorObj;\n}\n\n/**\n * @typedef {function(*): Promise<boolean|ValidatorResponse>} asyncValidator\n */\n\n/**\n * @typedef {Ref<*>[]|function(*): *} watchTargets\n */\n\n/**\n * Wraps validators that returns a Promise.\n * @param {asyncValidator} $validator\n * @param {watchTargets} $watchTargets\n * @return {{$async: boolean, $validator: asyncValidator, $watchTargets: watchTargets}}\n */\n\nfunction withAsync($validator) {\n  let $watchTargets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const validatorObj = normalizeValidatorObject($validator);\n  return Object.assign({}, validatorObj, {\n    $async: true,\n    $watchTargets\n  });\n}\n\nfunction forEach(validators) {\n  return {\n    $validator(collection) {\n      for (var _len = arguments.length, others = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        others[_key - 1] = arguments[_key];\n      }\n\n      // go over the collection. It can be a ref as well.\n      return unref(collection).reduce((previous, collectionItem, index) => {\n        // go over each property\n        const collectionEntryResult = Object.entries(collectionItem).reduce((all, _ref) => {\n          let [property, $model] = _ref;\n          // get the validators for this property\n          const innerValidators = validators[property] || {}; // go over each validator and run it\n\n          const propertyResult = Object.entries(innerValidators).reduce((all, _ref2) => {\n            let [validatorName, currentValidator] = _ref2;\n            // extract the validator. Supports simple and extended validators.\n            const validatorFunction = unwrapNormalizedValidator(currentValidator); // Call the validator, passing the VM as this, the value, current iterated object and the rest.\n\n            const $response = validatorFunction.call(this, $model, collectionItem, index, ...others); // extract the valid from the result\n\n            const $valid = unwrapValidatorResponse($response); // store the entire response for later\n\n            all.$data[validatorName] = $response;\n            all.$data.$invalid = !$valid || !!all.$data.$invalid;\n            all.$data.$error = all.$data.$invalid; // if not valid, get the $message\n\n            if (!$valid) {\n              let $message = currentValidator.$message || '';\n              const $params = currentValidator.$params || {}; // If $message is a function, we call it with the appropriate parameters\n\n              if (typeof $message === 'function') {\n                $message = $message({\n                  $pending: false,\n                  $invalid: !$valid,\n                  $params,\n                  $model,\n                  $response\n                });\n              } // save the error object\n\n\n              all.$errors.push({\n                $property: property,\n                $message,\n                $params,\n                $response,\n                $model,\n                $pending: false,\n                $validator: validatorName\n              });\n            }\n\n            return {\n              $valid: all.$valid && $valid,\n              $data: all.$data,\n              $errors: all.$errors\n            };\n          }, {\n            $valid: true,\n            $data: {},\n            $errors: []\n          });\n          all.$data[property] = propertyResult.$data;\n          all.$errors[property] = propertyResult.$errors;\n          return {\n            $valid: all.$valid && propertyResult.$valid,\n            $data: all.$data,\n            $errors: all.$errors\n          };\n        }, {\n          $valid: true,\n          $data: {},\n          $errors: {}\n        });\n        return {\n          $valid: previous.$valid && collectionEntryResult.$valid,\n          $data: previous.$data.concat(collectionEntryResult.$data),\n          $errors: previous.$errors.concat(collectionEntryResult.$errors)\n        };\n      }, {\n        $valid: true,\n        $data: [],\n        $errors: []\n      });\n    },\n\n    // collect all the validation errors into a 2 dimensional array, for each entry in the collection, you have an array of error messages.\n    $message: _ref3 => {\n      let {\n        $response\n      } = _ref3;\n      return $response ? $response.$errors.map(context => {\n        return Object.values(context).map(errors => errors.map(error => error.$message)).reduce((a, b) => a.concat(b), []);\n      }) : [];\n    }\n  };\n}\n\n// \"required\" core, used in almost every validator to allow empty values\nconst req = value => {\n  value = unref(value);\n  if (Array.isArray(value)) return !!value.length;\n\n  if (value === undefined || value === null) {\n    return false;\n  }\n\n  if (value === false) {\n    return true;\n  }\n\n  if (value instanceof Date) {\n    // invalid date won't pass\n    return !isNaN(value.getTime());\n  }\n\n  if (typeof value === 'object') {\n    for (let _ in value) return true;\n\n    return false;\n  }\n\n  return !!String(value).length;\n};\n/**\n * Returns the length of an arbitrary value\n * @param {Array|Object|String} value\n * @return {number}\n */\n\nconst len = value => {\n  value = unref(value);\n  if (Array.isArray(value)) return value.length;\n\n  if (typeof value === 'object') {\n    return Object.keys(value).length;\n  }\n\n  return String(value).length;\n};\n/**\n * Regex based validator template\n * @param {RegExp} expr\n * @return {function(*=): boolean}\n */\n\nfunction regex() {\n  for (var _len = arguments.length, expr = new Array(_len), _key = 0; _key < _len; _key++) {\n    expr[_key] = arguments[_key];\n  }\n\n  return value => {\n    value = unref(value);\n    return !req(value) || expr.every(reg => reg.test(value));\n  };\n}\n\nvar common = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  withParams: withParams,\n  withMessage: withMessage,\n  withAsync: withAsync,\n  forEach: forEach,\n  req: req,\n  len: len,\n  regex: regex,\n  unwrap: unref,\n  unwrapNormalizedValidator: unwrapNormalizedValidator,\n  unwrapValidatorResponse: unwrapValidatorResponse,\n  normalizeValidatorObject: normalizeValidatorObject\n});\n\nvar alpha$1 = regex(/^[a-zA-Z]*$/);\n\n/**\n * Validate if value is alphabetical string.\n * @type {NormalizedValidator}\n */\n\nvar alpha = {\n  $validator: alpha$1,\n  $message: 'The value is not alphabetical',\n  $params: {\n    type: 'alpha'\n  }\n};\n\nvar alphaNum$1 = regex(/^[a-zA-Z0-9]*$/);\n\n/**\n * Validate if value is alpha-numeric string.\n * @type {NormalizedValidator}\n */\n\nvar alphaNum = {\n  $validator: alphaNum$1,\n  $message: 'The value must be alpha-numeric',\n  $params: {\n    type: 'alphaNum'\n  }\n};\n\nvar numeric$1 = regex(/^\\d*(\\.\\d+)?$/);\n\n/**\n * Check whether a value is numeric.\n * @type NormalizedValidator\n */\n\nvar numeric = {\n  $validator: numeric$1,\n  $message: 'Value must be numeric',\n  $params: {\n    type: 'numeric'\n  }\n};\n\n/**\n * Check if a numeric value is between two values.\n * @param {Ref<Number> | Number} min\n * @param {Ref<Number> | Number} max\n * @return {function(*=): boolean}\n */\n\nfunction between$1 (min, max) {\n  return value => !req(value) || (!/\\s/.test(value) || value instanceof Date) && +unref(min) <= +value && +unref(max) >= +value;\n}\n\n/**\n * Checks if a value is between two values.\n * @param {Ref<Number> | Number} min\n * @param {Ref<Number> | Number} max\n * @return {NormalizedValidator}\n */\n\nfunction between (min, max) {\n  return {\n    $validator: between$1(min, max),\n    $message: _ref => {\n      let {\n        $params\n      } = _ref;\n      return `The value must be between ${$params.min} and ${$params.max}`;\n    },\n    $params: {\n      min,\n      max,\n      type: 'between'\n    }\n  };\n}\n\nconst emailRegex = /^(?:[A-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[A-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9]{2,}(?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nvar email$1 = regex(emailRegex);\n\n/**\n * Validate if value is an email.\n * @type {NormalizedValidator}\n */\n\nvar email = {\n  $validator: email$1,\n  $message: 'Value is not a valid email address',\n  $params: {\n    type: 'email'\n  }\n};\n\n/**\n * Check if a string is an IP Address\n * @param {String} value\n * @returns {boolean}\n */\n\nfunction ipAddress$1 (value) {\n  if (!req(value)) {\n    return true;\n  }\n\n  if (typeof value !== 'string') {\n    return false;\n  }\n\n  const nibbles = value.split('.');\n  return nibbles.length === 4 && nibbles.every(nibbleValid);\n}\n\nconst nibbleValid = nibble => {\n  if (nibble.length > 3 || nibble.length === 0) {\n    return false;\n  }\n\n  if (nibble[0] === '0' && nibble !== '0') {\n    return false;\n  }\n\n  if (!nibble.match(/^\\d+$/)) {\n    return false;\n  }\n\n  const numeric = +nibble | 0;\n  return numeric >= 0 && numeric <= 255;\n};\n\n/**\n * Validate if value is an ipAddress string.\n * @type {NormalizedValidator}\n */\n\nvar ipAddress = {\n  $validator: ipAddress$1,\n  $message: 'The value is not a valid IP address',\n  $params: {\n    type: 'ipAddress'\n  }\n};\n\n/**\n * Check if value is a properly formatted Mac Address.\n * @param {String | Ref<String>} [separator]\n * @returns {function(*): boolean}\n */\n\nfunction macAddress$1 () {\n  let separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ':';\n  return value => {\n    separator = unref(separator);\n\n    if (!req(value)) {\n      return true;\n    }\n\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    const parts = typeof separator === 'string' && separator !== '' ? value.split(separator) : value.length === 12 || value.length === 16 ? value.match(/.{2}/g) : null;\n    return parts !== null && (parts.length === 6 || parts.length === 8) && parts.every(hexValid);\n  };\n}\n\nconst hexValid = hex => hex.toLowerCase().match(/^[0-9a-f]{2}$/);\n\n/**\n * Validate if value is a valid Mac Address string.\n * @returns {NormalizedValidator}\n */\n\nfunction macAddress (separator) {\n  return {\n    $validator: macAddress$1(separator),\n    $message: 'The value is not a valid MAC Address',\n    $params: {\n      type: 'macAddress'\n    }\n  };\n}\n\n/**\n * Check if provided value has a maximum length\n * @param {Number | Ref<Number>} length\n * @returns {function(Array|Object|String): boolean}\n */\n\nfunction maxLength$1 (length) {\n  return value => !req(value) || len(value) <= unref(length);\n}\n\n/**\n * Validate the max length of a string.\n * @param {Number} max\n * @return {NormalizedValidator}\n */\n\nfunction maxLength (max) {\n  return {\n    $validator: maxLength$1(max),\n    $message: _ref => {\n      let {\n        $params\n      } = _ref;\n      return `The maximum length allowed is ${$params.max}`;\n    },\n    $params: {\n      max,\n      type: 'maxLength'\n    }\n  };\n}\n\n/**\n * Check if value is above a threshold.\n * @param {Number | Ref<Number>} length\n * @returns {function(Array|Object|String): boolean}\n */\n\nfunction minLength$1 (length) {\n  return value => !req(value) || len(value) >= unref(length);\n}\n\n/**\n * Check if value is above a threshold.\n * @param {Number | Ref<Number>} min\n * @returns {NormalizedValidator}\n */\n\nfunction minLength (min) {\n  return {\n    $validator: minLength$1(min),\n    $message: _ref => {\n      let {\n        $params\n      } = _ref;\n      return `This field should be at least ${$params.min} characters long`;\n    },\n    $params: {\n      min,\n      type: 'minLength'\n    }\n  };\n}\n\n/**\n * Validates if a value is empty.\n * @param {String | Array | Date | Object} value\n * @returns {boolean}\n */\n\nfunction required$1 (value) {\n  if (typeof value === 'string') {\n    value = value.trim();\n  }\n\n  return req(value);\n}\n\n/**\n * Check if a value is empty or not.\n * @type {NormalizedValidator}\n */\n\nvar required = {\n  $validator: required$1,\n  $message: 'Value is required',\n  $params: {\n    type: 'required'\n  }\n};\n\nconst validate$1 = (prop, val) => prop ? req(typeof val === 'string' ? val.trim() : val) : true;\n/**\n * Returns required if the passed property is truthy\n * @param {Boolean | String | function(any): Boolean | Ref<string | boolean>} propOrFunction\n * @return {function(value: *, parentVM: object): Boolean}\n */\n\n\nfunction requiredIf$1(propOrFunction) {\n  return function (value, parentVM) {\n    if (typeof propOrFunction !== 'function') {\n      return validate$1(unref(propOrFunction), value);\n    }\n\n    const result = propOrFunction.call(this, value, parentVM);\n    return validate$1(result, value);\n  };\n}\n\n/**\n * Returns required if the passed property is truthy\n * @param {Boolean | String | function(): (Boolean | Promise<boolean>)} prop\n * @return {NormalizedValidator}\n */\n\nfunction requiredIf (prop) {\n  return {\n    $validator: requiredIf$1(prop),\n    $message: 'The value is required',\n    $params: {\n      type: 'requiredIf',\n      prop\n    }\n  };\n}\n\nconst validate = (prop, val) => !prop ? req(typeof val === 'string' ? val.trim() : val) : true;\n/**\n * Returns required if the passed property is falsy.\n * @param {Boolean | String | function(any): Boolean | Ref<string | boolean>} propOrFunction\n * @return {function(value: *, parentVM: object): Boolean}\n */\n\n\nfunction requiredUnless$1(propOrFunction) {\n  return function (value, parentVM) {\n    if (typeof propOrFunction !== 'function') {\n      return validate(unref(propOrFunction), value);\n    }\n\n    const result = propOrFunction.call(this, value, parentVM);\n    return validate(result, value);\n  };\n}\n\n/**\n * Returns required unless the passed property is truthy\n * @param {Boolean | String | function(): (Boolean | Promise<boolean>)} prop\n * @return {NormalizedValidator}\n */\n\nfunction requiredUnless (prop) {\n  return {\n    $validator: requiredUnless$1(prop),\n    $message: 'The value is required',\n    $params: {\n      type: 'requiredUnless',\n      prop\n    }\n  };\n}\n\n/**\n * Check if two values are identical.\n * @param {*} equalTo\n * @return {function(*=): boolean}\n */\n\nfunction sameAs$1 (equalTo) {\n  return value => unref(value) === unref(equalTo);\n}\n\n/**\n * Check if two values are identical\n * @param {*} equalTo\n * @param {String} [otherName]\n * @return {NormalizedValidator}\n */\n\nfunction sameAs (equalTo) {\n  let otherName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'other';\n  return {\n    $validator: sameAs$1(equalTo),\n    $message: _ref => {\n      return `The value must be equal to the ${otherName} value`;\n    },\n    $params: {\n      equalTo,\n      otherName,\n      type: 'sameAs'\n    }\n  };\n}\n\n/**\n * Regex taken from {@link https://gist.github.com/dperini/729294}\n */\n\nconst urlRegex = /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\nvar url$1 = regex(urlRegex);\n\n/**\n * Check if a value is a url\n * @type {NormalizedValidator}\n */\n\nvar url = {\n  $validator: url$1,\n  $message: 'The value is not a valid URL address',\n  $params: {\n    type: 'url'\n  }\n};\n\nfunction _await$1(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nfunction syncOr(validators) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return validators.reduce((valid, fn) => {\n      if (unwrapValidatorResponse(valid)) return valid;\n      return unwrapNormalizedValidator(fn).apply(this, args);\n    }, false);\n  };\n}\n\nfunction asyncOr(validators) {\n  return function () {\n    const _this = this;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return validators.reduce(function (valid, fn) {\n      return _await$1(valid, function (r) {\n        return unwrapValidatorResponse(r) ? r : unwrapNormalizedValidator(fn).apply(_this, args);\n      });\n    }, Promise.resolve(false));\n  };\n}\n/**\n * Returns true when one of the provided functions returns true.\n * @param {...(NormalizedValidator|Function)} validators\n * @return {{$validator: function(...[*]=): (boolean | Promise<boolean>), $async: boolean, $watchTargets: any[]}}\n */\n\n\nfunction or$1() {\n  for (var _len3 = arguments.length, validators = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    validators[_key3] = arguments[_key3];\n  }\n\n  const $async = validators.some(v => v.$async);\n  const $watchTargets = validators.reduce((all, v) => {\n    if (!v.$watchTargets) return all;\n    return all.concat(v.$watchTargets);\n  }, []);\n\n  let $validator = () => false;\n\n  if (validators.length) $validator = $async ? asyncOr(validators) : syncOr(validators);\n  return {\n    $async,\n    $validator,\n    $watchTargets\n  };\n}\n\n/**\n * Returns true when one of the provided functions returns true.\n * @param {...(NormalizedValidator|Function)} validators\n * @return {NormalizedValidator}\n */\n\nfunction or () {\n  return withParams({\n    type: 'or'\n  }, withMessage('The value does not match any of the provided validators', or$1(...arguments)));\n}\n\nfunction _await(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n/**\n *\n * @param validators\n * @return {function(...[*]=): Promise<boolean>}\n */\n\n\nfunction syncAnd(validators) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return validators.reduce((valid, fn) => {\n      if (!unwrapValidatorResponse(valid)) return valid;\n      return unwrapNormalizedValidator(fn).apply(this, args);\n    }, true);\n  };\n}\n\nfunction asyncAnd(validators) {\n  return function () {\n    const _this = this;\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return validators.reduce(function (valid, fn) {\n      return _await(valid, function (r) {\n        return unwrapValidatorResponse(r) ? unwrapNormalizedValidator(fn).apply(_this, args) : r;\n      });\n    }, Promise.resolve(true));\n  };\n}\n/**\n * Returns true when all validators are truthy\n * @param {...(NormalizedValidator | Function)} validators\n * @return {{$validator: function(...[*]=): (boolean | Promise<boolean>), $async: boolean, $watchTargets: any[]}}\n */\n\n\nfunction and$1() {\n  for (var _len3 = arguments.length, validators = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    validators[_key3] = arguments[_key3];\n  }\n\n  const $async = validators.some(v => v.$async);\n  const $watchTargets = validators.reduce((all, v) => {\n    if (!v.$watchTargets) return all;\n    return all.concat(v.$watchTargets);\n  }, []);\n\n  let $validator = () => false;\n\n  if (validators.length) $validator = $async ? asyncAnd(validators) : syncAnd(validators);\n  return {\n    $async,\n    $validator,\n    $watchTargets\n  };\n}\n\n/**\n * Validate if all validators match.\n * @param {...*} validators\n * @returns {NormalizedValidator}\n */\n\nfunction and () {\n  return withParams({\n    type: 'and'\n  }, withMessage('The value does not match all of the provided validators', and$1(...arguments)));\n}\n\n/**\n * Swaps the result of a value\n * @param {NormalizedValidator|Function} validator\n * @returns {function(*=, *=): boolean}\n */\n\nfunction not$1 (validator) {\n  return function (value, vm) {\n    if (!req(value)) return true;\n    const response = unwrapNormalizedValidator(validator).call(this, value, vm);\n    if (!isPromise(response)) return !unwrapValidatorResponse(response);\n    return response.then(r => !unwrapValidatorResponse(r));\n  };\n}\n\n/**\n * Swaps the result of a value\n * @param {NormalizedValidator|Function} validator\n * @returns {NormalizedValidator}\n */\n\nfunction not (validator) {\n  return {\n    $validator: not$1(validator),\n    $message: `The value does not match the provided validator`,\n    $params: {\n      type: 'not'\n    }\n  };\n}\n\n/**\n * Check if a value is above a threshold.\n * @param {String | Number | Ref<Number> | Ref<String>} min\n * @returns {function(*=): boolean}\n */\n\nfunction minValue$1 (min) {\n  return value => !req(value) || (!/\\s/.test(value) || value instanceof Date) && +value >= +unref(min);\n}\n\n/**\n * Check if a value is above a threshold.\n * @param {String | Number | Ref<Number> | Ref<String>} min\n * @returns {NormalizedValidator}\n */\n\nfunction minValue (min) {\n  return {\n    $validator: minValue$1(min),\n    $message: _ref => {\n      let {\n        $params\n      } = _ref;\n      return `The minimum value allowed is ${$params.min}`;\n    },\n    $params: {\n      min,\n      type: 'minValue'\n    }\n  };\n}\n\n/**\n * Check if value is below a threshold.\n * @param {Number | Ref<Number> | Ref<String>} max\n * @returns {function(*=): boolean}\n */\n\nfunction maxValue$1 (max) {\n  return value => !req(value) || (!/\\s/.test(value) || value instanceof Date) && +value <= +unref(max);\n}\n\n/**\n * Check if value is below a threshold.\n * @param {Number | Ref<Number> | Ref<String>} max\n * @return {NormalizedValidator}\n */\n\nvar maxValue = (max => ({\n  $validator: maxValue$1(max),\n  $message: _ref => {\n    let {\n      $params\n    } = _ref;\n    return `The maximum value allowed is ${$params.max}`;\n  },\n  $params: {\n    max,\n    type: 'maxValue'\n  }\n}));\n\n// ^-[0-9]+$ - only for negative integer (minus sign without at least 1 digit is not a number)\n\nvar integer$1 = regex(/(^[0-9]*$)|(^-[0-9]+$)/);\n\n/**\n * Validate if value is integer.\n * @type {NormalizedValidator}\n */\n\nvar integer = {\n  $validator: integer$1,\n  $message: 'Value is not an integer',\n  $params: {\n    type: 'integer'\n  }\n};\n\nvar decimal$1 = regex(/^[-]?\\d*(\\.\\d+)?$/);\n\n/**\n * Validate if value is decimal number.\n * @type {NormalizedValidator}\n */\n\nvar decimal = {\n  $validator: decimal$1,\n  $message: 'Value must be decimal',\n  $params: {\n    type: 'decimal'\n  }\n};\n\n/**\n * Creates a translatable version of `withMessage` helper.\n * @param {function} t - the translation function of your choice\n * @param {function} [messagePath] - a function to generate the message path, passed to `t` for each message. By default it is `validations.${$validator}`\n * @param {function} [messageParams] - a function to augment the params, passed to `t` for each message.\n */\n\nfunction createI18nMessage(_ref) {\n  let {\n    t,\n    messagePath = _ref2 => {\n      let {\n        $validator\n      } = _ref2;\n      return `validations.${$validator}`;\n    },\n    messageParams = params => params\n  } = _ref;\n  return function withI18nMessage(validator) {\n    let {\n      withArguments = false,\n      messagePath: localMessagePath = messagePath,\n      messageParams: localMessageParams = messageParams\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    function message(props) {\n      return t(localMessagePath(props), localMessageParams(Object.assign({\n        model: props.$model,\n        property: props.$property,\n        pending: props.$pending,\n        invalid: props.$invalid,\n        response: props.$response,\n        validator: props.$validator,\n        propertyPath: props.$propertyPath\n      }, props.$params)));\n    }\n\n    if (withArguments && typeof validator === 'function') {\n      return function () {\n        return withMessage(message, validator(...arguments));\n      };\n    }\n\n    return withMessage(message, validator);\n  };\n}\n\nexport { alpha, alphaNum, and, between, createI18nMessage, decimal, email, common as helpers, integer, ipAddress, macAddress, maxLength, maxValue, minLength, minValue, not, numeric, or, required, requiredIf, requiredUnless, sameAs, url };\n"],"sourceRoot":""}